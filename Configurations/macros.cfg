[idle_timeout]
gcode:
    {% if printer.pause_resume.is_paused %}
      M107
      SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
      M117 Turning off hotend heater ....
    {% else %}
      TURN_OFF_HEATERS
      M84
    {% endif %}
timeout: 7200 ;time for heater turn off in seconds


[homing_override]
axes: z
set_position_z: 5
gcode:
    LED_Homing
    M400                  
    G90                  
    G0 Z10 F600           
    G28 X
    G28 Y
    G0 X{printer.toolhead.axis_maximum.y / 2 - 40} F9000 Y{printer.toolhead.axis_maximum.y / 2 - 30} F9000
    G28 Z
    G0 Z10 F600
	LED_Standby

[gcode_macro START_PRINT]
gcode:
    LED_Busy
    {% set BED_TEMP = params.BED_TEMP|int %} 
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|int %}
    {% set PRINTHEAD_TEMP = params.PRINTHEAD_TEMP|default(200)|int %}
    SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=extruder_t3 VALUE={PRINTHEAD_TEMP}
    SET_GCODE_VARIABLE MACRO=LOAD_FILAMENT VARIABLE=extruder_t2 VALUE={PRINTHEAD_TEMP}
	SET_GCODE_VARIABLE MACRO=UNLOAD_FILAMENT VARIABLE=extruder_t1 VALUE={PRINTHEAD_TEMP}
    M107
    LED_Heating
    M190 S{BED_TEMP}
    M104 S160
    G90
	LED_Homing
    G80
    LED_Meshing
    BED_MESH_CALIBRATE PROFILE=default AREA_START={params.AREA_START|default("0,0")} AREA_END={params.AREA_END|default("0,0")}
    BED_MESH_PROFILE LOAD=default
    G1 X70 Y-7 Z10 F10000
    LED_Heating
    M109 S{EXTRUDER_TEMP}
    SET_GCODE_OFFSET Z=0.0
	LED_Cleaning
    PRIME_LINE
    LED_Printing  

[gcode_macro PRIME_LINE]
gcode:
    M204 S5000
    G92 E0.0
    G1 X80 Y-7 Z0.4 F2000
    G1 X1 E12.0 F500.0
    G1 Y-3 F500
    G1 X80 E20 F500.0
    G1 Z0.02 F500
    G1 X85 F5000
    G92 E0.0
    G10
    G92 E0
    G1 Z2 F2000
    M204 S5000
	
[gcode_macro G80]
gcode:
    LED_Homing
    G28
    LED_Calibrating
    Z_TILT_ADJUST
  
[gcode_macro END_PRINT]
gcode:
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    LED_Busy
    TURN_OFF_HEATERS
    G91 
    G1 Z1 F400
    G1 E-2 Z2 F2400 
    {% if act_z < (max_z - 10.0) %}
      G1 Z9 F400
    {% endif %}
    G90 
    G1 X1 Y{printer.toolhead.axis_maximum.y  - 5} F3000
    M106 S0 
    M104 S0 
    M140 S0 
    M84 X Y E 
    LED_Standby
    M300 S100 P500
    BED_MESH_CLEAR

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
    LED_ERROR
    TURN_OFF_HEATERS
    G91 
    G1 Z1 F400
    G1 E-2 Z2 F2400 
    {% if act_z < (max_z - 10.0) %}
      G1 Z9 F400
    {% endif %}
    G90 
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    G1 X1 Y{printer.toolhead.axis_maximum.y  - 5} F5000
    M106 S0 
    M84 X Y Z E 
    LED_Standby

[gcode_macro reset]
gcode:
    RESTART
 
[gcode_macro G81]
gcode:
    BED_MESH_OUTPUT 

[gcode_macro M300]
gcode:
    {% set S = params.S|default(100)|int %}
    {% set P = params.P|default(800)|int %}
    SET_PIN PIN=_BEEPER_pin VALUE={S}
    G4 P{P}
    SET_PIN PIN=_BEEPER_pin VALUE=0

[gcode_macro M600]
variable_runout: 0
gcode:
    {% if runout == 1 %}
        LED_Filament_Change
    {% endif %}
    PAUSE
    UNLOAD_FILAMENT


[delayed_gcode clear_display]
initial_duration: 0.0
gcode:
    M117
        
[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
variable_extrude: 1.0
gcode:
    {% set E = params.E|default(1)|float %}
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    LED_Standby
	SET_GCODE_VARIABLE MACRO=M600 VARIABLE=runout VALUE=0
    {% if printer.idle_timeout.state|string != "Printing" and not printer.pause_resume.is_paused %}
    {action_respond_info("Printer is not printing")}
    {% else %}
        {% if act_z < (max_z - 2.0) %}
           {% set z_safe = 2.0 %}
        {% else %}
           {% set z_safe = max_z - act_z %}
        {% endif %}
      PAUSE_BASE
      G91
      {% if printer.extruder.can_extrude|lower == 'true' %}
         G1 E-{E} F2100
      {% else %}
        {action_respond_info("Nozzle not hot enough")}
      {% endif %}
      G1 Z{z_safe} F900
      G90
      G1 X{x_park} Y{y_park} F6000
    {% endif %}

[gcode_macro RESUME]
rename_existing: RESUME_BASE
variable_extruder_t3: 200
gcode:
    {% set E = params.E|default(0.5)|float %}
    {% if printer.extruder.temperature >= (extruder_t3)%}
      G91
      G1 E-{E} F2100
      G90
    {% else %}
      {action_respond_info("HEATING")}
      M109 S{extruder_t3}
      G91
      G1 E-{E} F2100
      G90
    {% endif %}  
    RESUME_BASE

[gcode_macro LOAD_FILAMENT]
variable_extruder_t2: 220
gcode:
	{% if printer.extruder.temperature < (extruder_t2) %}
		{action_respond_info("Nozzle not hot enough, HEATING")}
		M117 Heating to {extruder_t2}C
		LED_Heating
		M109 S{extruder_t2}
	{% endif %}
    M300
    M117 Feeding filament ...
    G92 E0.0
    G91
    G1 E40 F400
    G1 E30 F800
    G1 E80 F300
    G90
    G92 E0.0
    M300 S100 P500
    M400
    M117 Filament loaded ...
    LED_Standby
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=5
    RESUME
 
[gcode_macro UNLOAD_FILAMENT]
variable_extruder_t1: 200
gcode:
    {% if printer.extruder.temperature < (extruder_t1) %}
		{action_respond_info("Nozzle not hot enough, HEATING")}
		M117 Heating to {extruder_t1}C
		LED_Heating
		M109 S{extruder_t1}
	{% endif %}
    SET_FILAMENT_SENSOR SENSOR=fsensor ENABLE=0
    M117 Unloading filament ...
    G92 E0.0
    G91
	G1 E4 F700
    G1 E-80 F2500
    G90
    G92 E0.0
    M400
    M117 Please change filament ...
    LED_Standby
    SET_FILAMENT_SENSOR SENSOR=fsensor ENABLE=1
    M300 S100 P500
    UPDATE_DELAYED_GCODE ID=clear_display DURATION=5

 
[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
variable_mesh_area_offset : 5.0
variable_probe_samples : 2
variable_min_probe_count : 4
variable_probe_count_scale_factor : 1.0
variable_enable_reference_index : False
gcode:
 LED_Meshing
  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	      {% set area_min_y = params.AREA_START.split(",")[1]|float %}
	      {% set area_max_x = params.AREA_END.split(",")[0]|float %}
	      {% set area_max_y = params.AREA_END.split(",")[1]|float %}

	      {% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	      {% set meshMaxPointX = meshPointX %}
	      {% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	          {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	          {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "lagrange" %}
            {% if "algorithm" in bedMeshConfig and meshPointX >=4 and meshPointY >=4 %}
                {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}
  {% else %}  
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	      {% set area_min_y = params.AREA_START.split(",")[1]|float %}
	      {% set area_max_x = params.AREA_END.split(",")[0]|float %}
	      {% set area_max_y = params.AREA_END.split(",")[1]|float %}

	      {% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	      {% set meshMaxPointX = meshPointX %}
	      {% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	          {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	          {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "lagrange" %}
            {% if "algorithm" in bedMeshConfig and meshPointX >=4 and meshPointY >=4 %}
                {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}
  {% endif %}  

 LED_Standby

[gcode_macro Printer_SHUTDOWN]
gcode:
	LED_OFF
    {action_call_remote_method("set_device_power",
                             device="printer",
                             state="off")}
							 
[gcode_macro END_PRINT_T]
gcode:
    M109 S45
    UPDATE_DELAYED_GCODE ID=delayed_printer_off DURATION=15

[delayed_gcode delayed_printer_off]
initial_duration: 0.
gcode: 
    M117 Printer is turning off
    Printer_SHUTDOWN
	
[gcode_macro Nozzle_change]
gcode:
    LED_Homing
    G28
	LED_Calibrating
    G1 X120 Y0 f3000
    G1 Z200 f5000
	osvetleni_zap

[gcode_macro _DUMP_VARIABLES]
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}